@startuml
' + Several addresses
' + Delete product
' + Delete review
' + Delete rate
' - Split catalog and search
' - Search only by one property simultaneously
' + Connect products and category
' + Order:sendForShipment
' + Order log
' - Remove bank transfer
' + Payment:pay by User:cash / User:card
' + Notify by phone too
class Category {
    - name: string
    - products<product.id, product>
    + addProduct(product)
    + removeProduct(product)
}

class Review {
    - product: Product
    - text: string
    + remove()
}

class Rate {
    - product
    - value: int
    - author: Customer
    + remove()
}

class Product {
    - id: int
    - customer: Customer
    - name: string
    - quantity: int
    - price: int
    - category: Category
    - reviews: Reviews[]
    - rates: Reviews[]
    + createReview(description): Review
    + createRate(value): Rate

    + getAverageRate(): float

    + getCategory()
    + setCategory(category)

    + getPrice(): int
    + remove()
}
Product "*" *-- "1" Category: has
Product "*" --> "1" Customer: owned by
Product "1" -- "*" Review: has
Product "1" -- "*" Rate: has

class SearchFilter {
    - name: string
    - categories: Category[]
}

class Catalog {
    - products: Product[]
    - categories: Category[]
    + getCategories(): Category[]
    + createCategory(name): Category
    + removeCategory(category)

    + search(filter): Product[]
}
Catalog "1" o-- "*" Category: has
Catalog "1" o-- "*" Product: has
Catalog ..> SearchFilter: uses

class Item {
    - product: Product
    - quantity: int
    + getCost(): int
}
Item "1" o-- "1" Product: of

class Cart {
    - items: Item[]
    + getItems(): Item[]
    + addItem(product, quantity): Item
    + removeItem(item)
    + getCost(): int
    + order(): Order
}
Cart "1" o-- "*" Item: has
Cart ..> Order: order() - create

enum PaymentStatus {
    + Pending
    + Payed
    + Refund
}

abstract Payment {
    - amount: int
    - status: PaymentStatus
    + {abstract} pay()
}
Payment *- PaymentStatus: has

class BankTransferPayment extends Payment {
    + pay(amount)
}

class CardPayment extends Payment {
    + pay(card)
}

class CashPayment extends Payment {
    + pay(wallet)
}

class Address {
    - country: string
    - state: string
    - streetAddress: string
    - zipCode: string
}

enum OrderStatus {
    + Pending
    + Confirmed
    + Shipped
    + Delivering
    + Done
    + Canceled
}

class OrderLog {
    - createdAt: DateTime
    - status: OrderStatus
}
OrderLog o-- OrderStatus: is changing of

class Order {
    - customer: Customer
    - items: Item[]
    - payment: Payment
    - status: OrderStatus
    - address: Address
    - logs: OrderLog
    + constructor(customer, items)
    + getCustomer(): Customer
    + getCost(): int
    + confirm(address, payment?)
    + ship()
    + deliver()
    + done()
    + cancel()
    + isConfirmed()
    + isPayed()
    + isShipped()
}
Order "*" -- "1" Customer
Order *- OrderStatus: has
Order "1" o--> "*" OrderLog: has
Order "1" o-- "*" Item: has
Order "1" o-- "1" Address: has
Order ..> Payment: confirm()

abstract Notification {
    - text
}
Notification ..> User: to

class PhoneNotification extends Notification {
}

class EmailNotification extends Notification {
}

class Guest {
    + search(filter)
}
Guest ..> Catalog: search()

class Email {
    - address: string
    - messages: Notification
}

class Phone {
    - number: string
    - messages: Notification
}

class Person {
    - email: Email
    - phone: Phone
    + notify(msgText)
}
Person *-- Email: has
Person *-- Phone: has

enum UserStatus {
    + Active
    + Blocked
}

abstract User {
    - person: Person
    - username: string
    - password: string
    + constructor(person, username, password)
    + resetPassword(old, new)
    + isValidPassword(password): bool

    + notify(msgText)

    + block()
    + unblock()
}
User --> Person: is account for
User *- UserStatus: has

class Card {
    - money: int
    + addMoney(amount)
    + subtractMoney(amount)
}

class Wallet {
    - cash: int
    - card: Card
    + getCard(): Cart
    + setCard(card)
    + addCash(amount)
    + subtractCash(amount)
}
Wallet "1" *--> "*" Card: contains

class Customer extends User {
    - addresses: Address[]
    - card: Card
    - wallet: Wallet
    - cash: int
    - orders: Order[]

    + getWallet(): Wallet
    + getCart(): Wallet

    + addAddress(address)
    + getAddresses(): Address

    + createProduct(name, quantity, price, category)
    + removeProduct(product)

    + createReview(product, description)
    + createRate(product, value)

    + order(address?)
    + pushOrder(order)
}
Customer "1" *-- "1" Cart: has
Customer "1" *-- "1" Address: has
Customer "1" *-- "1" Wallet: has
Customer ..> Catalog: searches / manages
note left of Customer::orders
Delivered orders
end note

class Admin extends User {
    + blockUser(user)
    + unblock(user)

    + createCategory(name)
    + removeCategory(category)
}
Admin --> Authorization: manages users
Admin --> Catalog: manages products

class Deliverer extends User {
    + deliver(order)
}
Deliverer ..> Order: deliver()

class Authorization {
    - users: User[]
    + registerUser(person, username, password)
    + registerAdmin(person, username, password)
    + registerDeliverer(person, username, password)

    + login(username, password): User
    + getDeliverers(): Deliverer[]
}
Authorization "1" *-- "*" User: manages

class System <<singleton>> {
    - authorization: Authorization
    - catalog: Catalog
    - orders: Order[]
    + getAuthorization(): Authorization
    + getCatalog(): Catalog

    + addOrder(order)
    + removeOrder(order)
    + processOrders()
}
System ..> Authorization: provides
System ..> Catalog: provides
System ..> Order: process

@enduml
