@startuml
class Address {
    - country: string
    - state: string
    - streetAddress: string
    - zipCode: string
    + constructor(country, state, streetAddress, zipCode)
    - getCountry(): string
    - getState(): string
    - getStreetAddress(): string
    - getZipCode(): string
}

class Work {
    + startDate: Date
    + endDate: Date
    + company: string
    + position: string
}

class Education {
    + startDate: Date
    + endDate: Date
    + school: string
    + degree: string
}

class Profile {
    - getWorks: Work[]
    - educations: Education[]
    - address: Address
    + getWorks(): Works[]
    + getEducations(): Works[]

    + getAddress(): Address
    + setAddress(address)
}
Profile *-- Work: has
Profile *-- Education: has
Profile *-- Address: has

class FriendsList {
    - users: Set<User>
    + getUsers(): User
    + addUser(user): User
    + removeUser(user)
}
FriendsList -- User: list of friends
FriendsList ..> SubscriptionsList: followUser()
FriendsList ..> Notification: send

class Feed {
    - user
    + getTopics(): Topic[]
}

enum UserStatus {
    + Active
    + Blocked
}

abstract BaseUser {
   - username: string
   - password: string
   - status: UserStatus
   - notifications: Notification[]
   + constructor(username, password)

   + getUsername(): string
   + changePassword(oldPassword, newPassword)
   + isValidPassword(password): bool

   + getNotifications(): Notification[]
   + notify(notification)

   + getStatus(): UserStatus
   + block()
   + unblock()
}

interface UserGroupFacade <<Facade>> {
   + createGroup(name)
   + inviteUser(group, user)
   + removeUser(group, user)
}

interface UserWriterFacade <<Facade>> {
   + createTopic(text, title): Topic
   + addPost(topic, text): Post
   + sharePost(post, user)
   + addComment(message:Post | Comment, text): Comment
}

class User <<Observer>> extends BaseUser implements UserGroupFacade, UserWriterFacade {
   - profile: Profile
   - feed: Feed
   - friendsList: FriendsList

   -- Getters --
   + getProfile(): Profile
   + getFeed(): Feed
   + getFriendsList(): FriendsList

   -- Functions --
   + requestFriendship(user)
   + joinGroup(group)
   + sendMessage(user, text)
}
User *- UserStatus: has
User *-- Profile: has
User -- Feed: is user's interests: \n -follows \n -friends \n -groups
note left of User::joinGroup
    In fact joining requires confirmation
end note

class Admin extends BaseUser {
    + blockUser(user)
    + unblockUser(user)
}

class Authorization {
    - users: Map<string, User>
    + getUsers(): User[]
    + register(username, password)
    + login(username, password): User
}
Authorization *-- User: manages

class Group {
    - name: string
    - admin: User
    - users: User[]
    + constructor(admin, name)

    + getAdmin(): User

    + getUsers(): User
    + addUser(user)
    + removeUser(user)
}
Group o-- User: has
Group ..> SubscriptionsList: followGroup()

class GroupsCatalog <<Repository, Factory>> {
    - groups: Map<string, Group>
    - userGroups: Map<User, Set<Group>>
    + getAll(): Group[]
    + getByAuthor(user): Group[]
    + getByMember(user): Group[]
    + create(author, name): Group
    + remove(group): Group
}
GroupsCatalog *-- Group: manages

abstract Message {
    - author: User
    - text: string
    - createdAt: DateTime
    - updatedAt: DateTime
    + constructor(author, text)

    + getAuthor(): User
    + getText(text: string)
    + setText(text: string)

    + getCreationTime(): DateTime
    + getUpdatingTime(): DateTime
}
Message o-- User: is authored by

class DirectMessage extends Message {
    - receiver: User
    + constructor(author, text, receiver)
    + getReceiver(): User
}
DirectMessage ..> Notification: produces

class PageFilter {
    + keyword: string
    + author: User
}
note left of PageFilter::keyword
title/text
endnote

class MessageFilter {
    + keyword: string
    + author: User
}
note left of MessageFilter::keyword
text
endnote

class Privacy {
    - ReadableByFriends = 1
    - WritableByFriends   = 11
    - ReadableByMembers = 001
    - WritableByMembers   = 0011
    - ReadableByGuests = 00001
    - WritableByGuests    = 000011
    - flags: int

    - blacklist: Set<User>


    + addToBlackList(user)
    + removeFromBlackList(user)

    + isReadablyByFriends(): bool
    + setReadablyByFriends(enable): bool
    + isWritableByFriends(): bool
    + setWritableByFriends(enable): bool

    + isReadablyByGroupsMembers(): bool
    + setReadablyByGroupsMembers(enable): bool
    + isWritableByGroupsMembers(): bool
    + setWritableByGroupsMembers(enable): bool

    + isReadablyByGuest(): bool
    + setReadablyByGuest(enable): bool
    + isWritableByGuest(): bool
    + setWritableByGuest(enable): bool
}

abstract Page extends Message {
    - privacy: Privacy
    - posts: Post[]

    + getPrivacy(): Privacy

    + getPosts(): Post[]
    + addPost(author, text): Post
}
Page *-- Privacy
Page *-- Post: has

class PagesCatalog <<Repository, Factory>> {
    - pages: <string, Page>
    + getAll(): Page[]
    + createPrivatePage(author, title, text): PrivatePage
    + createTopic(author, title, text): Topic
}

interface SearchPages {
    + searchPage(pageFilter): Page[]
    + searchMessage(messageFilter): Post|Comment[]
}

class PagesSearchCatalog <<Decorator>> extends PagesCatalog implements SearchPages{
}
PagesSearchCatalog *-- Page: provides
PagesSearchCatalog::searchPage --> PageFilter: search by
PagesSearchCatalog::searchMessage --> MessageFilter: search by

class AccessController {
    + canReadPage(user, page): bool
    + canWritePage(user, page): bool
}
AccessController ..> Page: uses
AccessController ..> User: uses

class Topic extends Page {
    - title: string
    + constructor(author, text, title)
}

class PrivatePage extends Page {
}

enum LikeType {
    + Up
    + Down
}

class Like {
    - author: User
    - type: LikeType
    + getAuthor(): User
    + isUp(): boolean
}
Like *- LikeType

enum FriendshipRequestStatus {
    + Pending
    + Accepted
    + Rejected
}

class FriendshipRequest {
    - sender: User
    - receiver: User
    - status: FriendshipRequestStatus
    + constructor(sender, receiver)
    + getSender(): User
    + getReceiver(): User

    + accept()
    + reject()
}
FriendshipRequest *- FriendshipRequestStatus: has
FriendshipRequest ..> Notification: produces
FriendshipRequest ..> FriendsList: updates by accept()

enum InviteRequestStatus {
    + Pending
    + Accepted
    + Rejected
}

class InviteRequest {
    - sender: User
    - receiver: User
    - group: Group
    - status: InviteRequestStatus
    + constructor(sender, receiver, group)
    + getSender(): User
    + getReceiver(): User
    + getGroup(): Group

    + accept()
    + reject()
}
InviteRequest *- InviteRequestStatus: has
InviteRequest ..> Notification: produces
InviteRequest ..> Group: updates by accept()

abstract Notification {
    - receiver: User
    + {abstract} getText(): string
    + constructor(receiver)
}

class FriendshipRequestNotification extends Notification {
    - request: FriendshipRequest
    + constructor(receiver, request)
    + getRequest(): FriendshipRequest
}

class FriendshipNotification extends Notification {
    - friend: User
    + constructor(receiver, friend)
    + getFriend(): User
}

class InviteRequestNotification extends Notification {
    - group: Group
    + constructor(receiver, group)
    + getGroup(): Group
}

class DirectMessageNotification extends Notification {
    - message: DirectMessage
    + constructor(receiver, message)
    + getMessage(): DirectMessage
}

class CreatedPostNotification extends Notification {
    - post: Post
    + getPost(): Post
}

class CreatedCommentNotification extends Notification {
    - comment: Comment
    + getComment(): Comment
}

class ShareNotification extends Notification {
    - message: PageMessage
    - sender: User
    + constructor(sender, receiver, post)
    + getMessage(): PageMessage
    + getSender(): User
}

abstract PageMessage extends Message {
    - likes: <string, Like>
    - comments: Comment[]

    + getComments(): Comment[]
    + addComment(author, text)

    + getLikes(): Like[]
    + like(author)
    + dislike(author)
    + removeLike(author)
}
PageMessage *-- Like: is rated by

class Post extends PageMessage {
}
Post ..> SubscriptionsList: createdPostNotify()

class Comment extends PageMessage {
}
Comment ..> Notification: produces

class SubscriptionsList <<Mediator>> {
    - userFollowers: Map<User, Set<User>>
    - groupFollowers: Map<Group, Set<User>>

    + followUser(follower, user)
    + unfollowUser(follower, user)

    + followGroup(follower, group)
    + unfollowGroup(follower, group)

    + createdPostNotify(post)
}

class System <<Singleton>> {
    - auth: Authorization
    - pagesCatalog: PagesSearchCatalog
    - groupsCatalog: GroupsCatalog
    - accessController: AccessController
    - subscriptionsList: SubscriptionsList
    + getAuth(): Authorization
    + getPagesCatalog(): PagesSearchCatalog
    + getGroupsCatalog(): GroupsCatalog
    + getAccessController(): AccessController
    + getSubscriptionsList(): SubscriptionsList
}
System ..> Authorization: provides
System ..> PagesSearchCatalog: provides
System ..> GroupsCatalog: provides
System ..> AccessController: provides
System ..> SubscriptionsList: provides

@enduml
